/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our Samples at https://docs.gradle.org/8.10.2/samples
 */

plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.12.0'
    id("io.freefair.lombok") version "8.11"
}

def restAssuredVersion = "5.5.0",
    allureVersion = "2.29.0"

allure {
    report { // секция репора<latest>
        version.set(allureVersion)
    }
    adapter {  // отвечает за появление папки build/allure-results
        aspectjWeaver.set(true) //  обработка аннотации @step
        frameworks {
            junit5 { //название фреймворка
                adapterVersion.set(allureVersion) // версия интеграции фреимворка и Aallure
            }
        }
    }

}


repositories {
    mavenCentral()
}

compileTestJava {
    options.encoding = 'UTF-8'
}

dependencies {

    testImplementation 'com.codeborne:selenide:7.5.1'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.11.2'
    testImplementation 'com.github.javafaker:javafaker:1.0.2'
    testImplementation 'org.slf4j:slf4j-simple:2.0.16'
    testImplementation 'com.codeborne:pdf-test:1.9.1'
    testImplementation 'com.codeborne:xls-test:1.4.3'
    testImplementation 'com.opencsv:opencsv:5.9'
    testImplementation 'com.google.code.gson:gson:2.11.0'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.18.1'
    testImplementation 'com.fasterxml.jackson.core:jackson-core:2.18.1'
    testImplementation "io.qameta.allure:allure-selenide:$allureVersion"
    testImplementation "io.rest-assured:rest-assured:$restAssuredVersion"
    testImplementation "io.rest-assured:json-schema-validator:$restAssuredVersion"
    testImplementation 'io.qameta.allure:allure-rest-assured:2.29.1'


//    testImplementation(
//            'com.codeborne:selenide:7.5.1',
//            'org.junit.jupiter:junit-jupiter:5.11.2',
//            'com.github.javafaker:javafaker:1.0.2',
//            'org.slf4j:slf4j-simple:2.0.16'
//
//    )
}

tasks.withType(Test) {
    useJUnitPlatform()

    testLogging {
        lifecycle {
            events "passed", "started", "skipped", "failed", "standard_error", "standard_out"
            exceptionFormat "short"
        }
    }

    systemProperties(System.getProperties())
}

task api_test(type: Test) {
    useJUnitPlatform {
        includeTags("API")
    }
}